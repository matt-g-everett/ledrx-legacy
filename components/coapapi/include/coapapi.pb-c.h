/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: coapapi.proto */

#ifndef PROTOBUF_C_coapapi_2eproto__INCLUDED
#define PROTOBUF_C_coapapi_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ledapi__Frame Ledapi__Frame;
typedef struct _Ledapi__Config Ledapi__Config;
typedef struct _Ledapi__FrameSet Ledapi__FrameSet;


/* --- enums --- */

typedef enum _Ledapi__Config__Mode {
  LEDAPI__CONFIG__MODE__OFF = 0,
  LEDAPI__CONFIG__MODE__FIXED_FRAME = 1,
  LEDAPI__CONFIG__MODE__SWISH_RAINBOW = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LEDAPI__CONFIG__MODE)
} Ledapi__Config__Mode;

/* --- messages --- */

struct  _Ledapi__Frame
{
  ProtobufCMessage base;
  ProtobufCBinaryData frame_data;
};
#define LEDAPI__FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ledapi__frame__descriptor) \
    , {0,NULL} }


struct  _Ledapi__Config
{
  ProtobufCMessage base;
  Ledapi__Config__Mode mode;
  Ledapi__Frame *fixed_frame;
};
#define LEDAPI__CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ledapi__config__descriptor) \
    , LEDAPI__CONFIG__MODE__OFF, NULL }


struct  _Ledapi__FrameSet
{
  ProtobufCMessage base;
  size_t n_frames;
  Ledapi__Frame **frames;
};
#define LEDAPI__FRAME_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ledapi__frame_set__descriptor) \
    , 0,NULL }


/* Ledapi__Frame methods */
void   ledapi__frame__init
                     (Ledapi__Frame         *message);
size_t ledapi__frame__get_packed_size
                     (const Ledapi__Frame   *message);
size_t ledapi__frame__pack
                     (const Ledapi__Frame   *message,
                      uint8_t             *out);
size_t ledapi__frame__pack_to_buffer
                     (const Ledapi__Frame   *message,
                      ProtobufCBuffer     *buffer);
Ledapi__Frame *
       ledapi__frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ledapi__frame__free_unpacked
                     (Ledapi__Frame *message,
                      ProtobufCAllocator *allocator);
/* Ledapi__Config methods */
void   ledapi__config__init
                     (Ledapi__Config         *message);
size_t ledapi__config__get_packed_size
                     (const Ledapi__Config   *message);
size_t ledapi__config__pack
                     (const Ledapi__Config   *message,
                      uint8_t             *out);
size_t ledapi__config__pack_to_buffer
                     (const Ledapi__Config   *message,
                      ProtobufCBuffer     *buffer);
Ledapi__Config *
       ledapi__config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ledapi__config__free_unpacked
                     (Ledapi__Config *message,
                      ProtobufCAllocator *allocator);
/* Ledapi__FrameSet methods */
void   ledapi__frame_set__init
                     (Ledapi__FrameSet         *message);
size_t ledapi__frame_set__get_packed_size
                     (const Ledapi__FrameSet   *message);
size_t ledapi__frame_set__pack
                     (const Ledapi__FrameSet   *message,
                      uint8_t             *out);
size_t ledapi__frame_set__pack_to_buffer
                     (const Ledapi__FrameSet   *message,
                      ProtobufCBuffer     *buffer);
Ledapi__FrameSet *
       ledapi__frame_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ledapi__frame_set__free_unpacked
                     (Ledapi__FrameSet *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ledapi__Frame_Closure)
                 (const Ledapi__Frame *message,
                  void *closure_data);
typedef void (*Ledapi__Config_Closure)
                 (const Ledapi__Config *message,
                  void *closure_data);
typedef void (*Ledapi__FrameSet_Closure)
                 (const Ledapi__FrameSet *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ledapi__frame__descriptor;
extern const ProtobufCMessageDescriptor ledapi__config__descriptor;
extern const ProtobufCEnumDescriptor    ledapi__config__mode__descriptor;
extern const ProtobufCMessageDescriptor ledapi__frame_set__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_coapapi_2eproto__INCLUDED */
